@online{es_benchmarking,
	title = {Elasticsearch Benchmarks},
	url = {https://elasticsearch-benchmarks.elastic.co/#},
	urldate = {2024-01-17},
	file = {Elasticsearch Benchmarks:/home/lquenti/oC/docs/Zotero/storage/IRT75LWT/elasticsearch-benchmarks.elastic.co.html:text/html},
  }

@online{jmeter,
	title = {Apache {JMeter} - Apache {JMeter}™},
	url = {https://jmeter.apache.org/},
	urldate = {2024-01-18},
	file = {Apache JMeter - Apache JMeter™:/home/lquenti/oC/docs/Zotero/storage/RRD4S9ZV/jmeter.apache.org.html:text/html},
}

@software{wrk,
	title = {wg/wrk},
	url = {https://github.com/wg/wrk},
	abstract = {Modern {HTTP} benchmarking tool},
	author = {Glozer, Will},
	urldate = {2024-01-18},
	date = {2024-01-18},
	note = {original-date: 2012-03-20T11:12:28Z},
}

@online{k6,
	title = {Load testing for engineering teams {\textbar} Grafana k6},
	url = {https://k6.io},
	abstract = {k6 is an open-source tool and cloud service that makes load testing easy for developers and {QA} engineers.},
	urldate = {2024-01-18},
	langid = {english},
}

@online{rally,
	title = {elastic/rally: Macrobenchmarking framework for Elasticsearch},
	url = {https://github.com/elastic/rally},
	urldate = {2024-01-18},
}


@article{rallyusecase1,
	title = {Tuning of Elasticsearch Configuration: Parameter Optimization Through Simultaneous Perturbation Stochastic Approximation},
	volume = {5},
	issn = {2624-909X},
	url = {https://www.frontiersin.org/articles/10.3389/fdata.2022.686416},
	shorttitle = {Tuning of Elasticsearch Configuration},
	abstract = {Elasticsearch is currently the most popular search engine for full-text database management systems. By default, its configuration does not change while it receives data. However, when Elasticsearch stores a large amount of data over time, the default configuration becomes an obstacle to improving performance. In addition, the servers that host Elasticsearch may have limited resources, such as internal memory and {CPU}. A general solution to these problems is to dynamically tune the configuration parameters of Elasticsearch in order to improve its performance. The sheer number of parameters involved in this configuration makes it a complex task. In this work, we apply the Simultaneous Perturbation Stochastic Approximation method for optimizing Elasticsearch with multiple unknown parameters. Using this algorithm, our implementation optimizes the Elasticsearch configuration parameters by observing the performance and automatically changing the configuration to improve performance. The proposed solution makes it possible to change the configuration parameters of Elasticsearch automatically without having to restart the currently running instance of Elasticsearch. The results show a higher than 40\% improvement in the combined data insertion capacity and the system's response time.},
	journaltitle = {Frontiers in Big Data},
	author = {Haugerud, Hårek and Sobhie, Mohamad and Yazidi, Anis},
	urldate = {2024-01-18},
	date = {2022},
	file = {Full Text PDF:/home/lquenti/oC/docs/Zotero/storage/N9S3NUYA/Haugerud et al. - 2022 - Tuning of Elasticsearch Configuration Parameter O.pdf:application/pdf},
}

@misc{rallyusecase2,
	title = {A solution for secure use of Kibana and Elasticsearch in multi-user environment},
	url = {http://arxiv.org/abs/1706.10040},
	abstract = {Monitoring is indispensable to check status, activities, or resource usage of {IT} services. A combination of Kibana and Elasticsearch is used for monitoring in many places such as {KEK}, {CC}-{IN}2P3, {CERN}, and also non-{HEP} communities. Kibana provides a web interface for rich visualization, and Elasticsearch is a scalable distributed search engine. However, these tools do not support authentication and authorization features by default. There is no problem in the case of single-user environment. On the other hand, in the case of single Kibana and Elasticsearch services shared among many users, any user who can access Kibana can retrieve other’s information from Elasticsearch. In multi-user environment, in order to protect own data from others or share part of data among a group, ﬁne-grained access control is necessary.},
	number = {{arXiv}:1706.10040},
	publisher = {{arXiv}},
	author = {Takase, Wataru and Nakamura, Tomoaki and Watase, Yoshiyuki and Sasaki, Takashi},
	urldate = {2024-01-18},
	date = {2017-06-30},
	langid = {english},
	eprinttype = {arxiv},
	eprint = {1706.10040 [cs]},
	keywords = {Computer Science - Cryptography and Security},
	file = {Takase et al. - 2017 - A solution for secure use of Kibana and Elasticsea.pdf:/home/lquenti/oC/docs/Zotero/storage/D7FQYPBC/Takase et al. - 2017 - A solution for secure use of Kibana and Elasticsea.pdf:application/pdf},
}

@article{rallyusecase3,
	title = {Hdconfigor: Automatically Tuning High Dimensional Configuration Parameters for Log Search Engines},
	volume = {8},
	issn = {2169-3536},
	url = {https://ieeexplore.ieee.org/document/9079492/},
	doi = {10.1109/ACCESS.2020.2990735},
	shorttitle = {Hdconfigor},
	abstract = {Search engines are nowadays widely applied to store and analyze logs generated by largescale distributed systems. To adapt to various workload scenarios, log search engines such as Elasticsearch usually expose a large number of performance-related conﬁguration parameters. As manual conﬁguring is time consuming and labor intensive, automatically tuning conﬁguration parameters to optimize performance has been an urgent need. However, it is challenging because: 1) Due to the complex implementation, the relationship between performance and conﬁguration parameters is difﬁcult to model and thus the objective function is actually a black box; 2) In addition to application parameters, {JVM} and kernel parameters are also closely related to the performance and together they construct a high dimensional conﬁguration space; 3) To iteratively search for the best conﬁguration, a tool is necessary to automatically deploy the newly generated conﬁguration and launch tests to measure the corresponding performance. To address these challenges, this paper designs and implements {HDConﬁgor}, an automatic holistic conﬁguration parameter tuning tool for log search engines. In order to solve the high dimensional optimization problem, we propose a modiﬁed Random {EMbedding} Bayesian Optimization algorithm ({mREMBO}) in {HDConﬁgor} which is a black-box approach. Instead of directly using a black-box optimization algorithm such as Bayesian optimization ({BO}), {mREMBO} ﬁrst generates a lower dimensional embedded space through introducing a random embedding matrix and then performs {BO} in this embedded space. Therefore, {HDConﬁgor} is able to ﬁnd a competitive conﬁguration automatically and quickly. We evaluate {HDConﬁgor} in an Elasticsearch cluster with different workload scenarios. Experimental results show that compared with the default conﬁguration, the best relative median indexing results achieved by {mREMBO} can reach 2.07×. In addition, under the same number of trials, {mREMBO} is able to ﬁnd a conﬁguration with at least a further 10.31\% improvement in throughput compared to Random search, Simulated Annealing and {BO}.},
	pages = {80638--80653},
	journaltitle = {{IEEE} Access},
	shortjournal = {{IEEE} Access},
	author = {Dou, Hui and Chen, Pengfei and Zheng, Zibin},
	urldate = {2024-01-18},
	date = {2020},
	langid = {english},
	file = {Dou et al. - 2020 - Hdconfigor Automatically Tuning High Dimensional .pdf:/home/lquenti/oC/docs/Zotero/storage/URPZACEC/Dou et al. - 2020 - Hdconfigor Automatically Tuning High Dimensional .pdf:application/pdf},
}


@software{rallytracks,
	title = {elastic/rally-tracks},
	url = {https://github.com/elastic/rally-tracks},
	abstract = {Track specifications for the Elasticsearch benchmarking tool Rally},
	publisher = {elastic},
	urldate = {2024-01-18},
	date = {2024-01-18},
	note = {original-date: 2016-06-06T13:16:40Z},
}

@software{tsbs,
	title = {timescale/tsbs},
	rights = {{MIT}},
	url = {https://github.com/timescale/tsbs},
	abstract = {Time Series Benchmark Suite, a tool for comparing and evaluating databases for time series data},
	publisher = {Timescale},
	urldate = {2024-01-18},
	date = {2024-01-17},
	note = {original-date: 2018-08-08T14:30:28Z},
	keywords = {benchmarking, cassandra, influxdb, mongodb, time-series, timescaledb},
}


@software{ifdbcomp,
	title = {influxdata/influxdb-comparisons},
	rights = {{MIT}},
	url = {https://github.com/influxdata/influxdb-comparisons},
	abstract = {Code for comparison write ups of {InfluxDB} and other solutions},
	publisher = {{InfluxData}},
	urldate = {2024-01-18},
	date = {2023-11-23},
	note = {original-date: 2016-03-25T20:27:10Z},
}


@online{ifdbes,
	title = {{InfluxDB} vs. Elasticsearch for Time Series Data \& Metrics Benchmark},
	url = {https://www.influxdata.com/blog/influxdb-markedly-elasticsearch-in-time-series-data-metrics-benchmark/},
	abstract = {{InfluxDB} outperformed Elasticsearch in two tests, with 3.8x greater write throughput, while using 9x less disk space when compared against Elastic�s time series optimized configuration. {InfluxDB} delivered 7.7x faster response times for tested queries, ...},
	titleaddon = {{InfluxData}},
	author = {Product, Chris Churilo / and Feb 06, Use Cases and {2018}},
	urldate = {2024-01-18},
	date = {2018-02-06},
	file = {Snapshot:/home/lquenti/oC/docs/Zotero/storage/E3HBJBEG/influxdb-markedly-elasticsearch-in-time-series-data-metrics-benchmark.html:text/html},
}

@software{singularity,
	title = {sylabs/singularity: {SingularityCE} 4.1.0 Release Candidate 1},
	url = {https://zenodo.org/records/10495969},
	shorttitle = {sylabs/singularity},
	abstract = {{SingularityCE} 4.1.0-rc.1 is the first release candidate for the upcoming {SingularityCE} 4.1.0 release. This release candidate is intended to allow testing of new functionality and existing workflows. We welcome any and all feedback you are able to provide. The release candidate is not intented for production use. Please see the latest 4.0.3 stable release instead. Changed defaults / behaviours In native mode, {SIF}/{SquashFS} container images will now be mounted with squashfuse when kernel mounts are disabled in singularity.conf, or cannot be used (non-setuid / user namespace workflow). If the {FUSE} mount fails, Singularity will fall back to extracting the container to a temporary sandbox in order to run it. In native mode, bare extfs container images will now be mounted with fuse2fs when kernel mounts are disabled in singularity.conf, or cannot be used (non-setuid / user namespace workflow). New Features \& Functionality The registry login and registry logout commands now support a --authfile {\textless}path{\textgreater} flag, which causes the {OCI} credentials to be written to / removed from a custom file located at {\textless}path{\textgreater} instead of the default location (\${HOME}/.singularity/docker-config.json). The commands pull, push, run, exec, shell, and instance start can now also be passed a --authfile {\textless}path{\textgreater} option, to read {OCI} registry credentials from this custom file. A new --keep-layers flag, for the pull and run/shell/exec/instance startcommands, allows individual layers to be preserved when an {OCI}-{SIF} image is created from an {OCI} source. Multi layer {OCI}-{SIF} images can be run with {SingularityCE} 4.1 and later. Singularity will now build {OCI}-{SIF} images from Dockerfiles, if the --oci flag is used with the build command. Provide a Dockerfile as the final argument to build, instead of a Singularity definition (.def) file. Supports --build-arg / --build-arg-file options, --arch for cross-architecture builds, --authfile and other authentication options, and more. See the user guide for more information. Docker-style {SCIF} containers (https://sci-f.github.io/tutorial-preview-install) are now supported. If the entrypoint of an {OCI} container is the scif executable, then the run / exec / shell commands in --oci mode can be given the --app {\textless}appname{\textgreater} flag, and will automatically invoke the relevant {SCIF} command. A new --tmp-sandbox flag has been added to the run / shell / exec / instance start commands. This will force Singularity to extract a container to a temporary sandbox before running it, when it would otherwise perform a kernel or {FUSE} mount. Deprecated Functionality The experimental --sif-fuse flag, and sif fuse directive in singularity.conf are deprecated. The flag and directive were used to enable experimental mounting of {SIF}/{SquashFS} container images with {FUSE} in prior versions of Singularity. From 4.1, {FUSE} mounts are used automatically when kernel mounts are disabled / not available. Thanks / Reporting Bugs Thanks to our contributors for code, feedback and, testing efforts! As always, please report any bugs to: https://github.com/sylabs/singularity/issues/new If you think that you've discovered a security vulnerability please report it to: security@sylabs.io Have fun! Downloads Source Code Please use the singularity-ce-4.1.0-rc.1.tar.gz download below to obtain and install {SingularityCE} 4.0.3. The {GitHub} auto-generated 'Source Code' downloads do not include required dependencies etc. Packages {RPM} / {DEB} packages are provided for: Ubuntu 20.04 (focal) Ubuntu 22.04 (jammy) {RHEL}/{CentOS} 7 (el7) {RHEL}/{CentOS}/{AlmaLinux}/Rocky 8 (el8) {RHEL}/{CentOS}/{AlmaLinux}/Rocky 9 (el9) These packages were built with Go 1.21.6},
	version = {v4.1.0-rc.1},
	publisher = {Zenodo},
	author = {Kurtzer, Gregory M. and Trudgian, Dave and cclerget and Bauer, Michael and Kaneshiro, Ian and Godlove, David and Vanessasaurus and Cote, Yannick and Gutierrez, Carlos Eduardo Arango and Vallee, Geoffroy and {DrDaveD} and Cook, Justin and Stover, Jason and Hughes, Adam and Bockelman, Brian P. and Magallon, Marcelo and Chappell, Jacob and Frisch, Mike and Tamino, Daniele and Madison, Carl and Yakovtseva, Sasha and Ghosh, Satrajit and Duffy, Amanda and {VP} and Huynh, Tru and Gray, Mike and Halchenko, Yaroslav and Abecassis, Felix},
	urldate = {2024-01-18},
	date = {2024-01-12},
	doi = {10.5281/zenodo.10495969},
	file = {Zenodo Snapshot:/home/lquenti/oC/docs/Zotero/storage/FMHBPQUK/10495969.html:text/html},
}


@online{nyctaxis,
	title = {rally-tracks/nyc\_taxis at master · elastic/rally-tracks},
	url = {https://github.com/elastic/rally-tracks/tree/master/nyc_taxis},
	abstract = {Track specifications for the Elasticsearch benchmarking tool Rally - elastic/rally-tracks},
	titleaddon = {{GitHub}},
	urldate = {2024-02-15},
	langid = {english},
}


@online{tlcdata,
	title = {{TLC} Trip Record Data - {TLC}},
	url = {https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page},
	urldate = {2024-02-15},
	file = {TLC Trip Record Data - TLC:/home/lquenti/oC/docs/Zotero/storage/ZRSFGRY6/tlc-trip-record-data.html:text/html},
}


@online{myingestion,
	title = {elasticsearch\_benchmarker\_mpi/benchmarker/ingestor.py at main · lquenti/elasticsearch\_benchmarker\_mpi},
	url = {https://github.com/lquenti/elasticsearch_benchmarker_mpi/blob/main/benchmarker/ingestor.py},
	urldate = {2024-05-10},
	file = {elasticsearch_benchmarker_mpi/benchmarker/ingestor.py at main · lquenti/elasticsearch_benchmarker_mpi:/home/lquenti/oC/docs/Zotero/storage/S33ZVP5C/ingestor.html:text/html},
}


@online{myquery,
	title = {elasticsearch\_benchmarker\_mpi/benchmarker/queryer.py at main · lquenti/elasticsearch\_benchmarker\_mpi},
	url = {https://github.com/lquenti/elasticsearch_benchmarker_mpi/blob/main/benchmarker/queryer.py},
	urldate = {2024-05-10},
}

@online{myspawner,
	title = {elasticsearch\_benchmarker\_mpi/containers/start\_es\_cluster.py at main · lquenti/elasticsearch\_benchmarker\_mpi},
	url = {https://github.com/lquenti/elasticsearch_benchmarker_mpi/blob/main/containers/start_es_cluster.py},
	urldate = {2024-05-10},
}


