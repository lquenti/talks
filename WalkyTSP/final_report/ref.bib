
@misc{kapitan_nemo_tsp_deutschland_3png_2005,
	title = {{TSP}\_Deutschland\_3.png ({PNG}-{Grafik}, 326 × 350 {Pixel})},
	url = {https://upload.wikimedia.org/wikipedia/commons/c/c4/TSP_Deutschland_3.png},
	urldate = {2023-05-15},
	author = {{Kapitän Nemo}},
	month = oct,
	year = {2005},
	file = {TSP_Deutschland_3.png (PNG-Grafik, 326 × 350 Pixel):/home/johann/Zotero/storage/IYY4RZJY/TSP_Deutschland_3.html:text/html},
}

@misc{noauthor_dateitsp_nodate,
	title = {Datei:{TSP} {Deutschland} 3.png – {Wikipedia}},
	shorttitle = {Datei},
	url = {https://commons.wikimedia.org/wiki/File:TSP_Deutschland_3.png},
	language = {de},
	urldate = {2023-05-15},
	file = {Snapshot:/home/johann/Zotero/storage/WHUBV99R/DateiTSP_Deutschland_3.html:text/html},
}

@misc{song_solving_2021,
	title = {Solving the {Traveling} {Salesperson} {Problem} with deep reinforcement learning on {Amazon} {SageMaker} {\textbar} {AWS} {Open} {Source} {Blog}},
	url = {https://aws.amazon.com/de/blogs/opensource/solving-the-traveling-salesperson-problem-with-deep-reinforcement-learning-on-amazon-sagemaker/},
	language = {en},
	urldate = {2023-05-15},
	author = {Song, Yin and Davis, Josiah and Duthie, Eden and Wu, Chen},
	month = sep,
	year = {2021},
	file = {Solving the Traveling Salesperson Problem with deep reinforcement learning on Amazon SageMaker | AWS Open Source Blog:/home/johann/Zotero/storage/WKWPKKNW/solving-the-traveling-salesperson-problem-with-deep-reinforcement-learning-on-amazon-sagemaker.html:text/html},
}

@misc{nayuki_next_2018,
	title = {Next lexicographical permutation algorithm},
	url = {https://www.nayuki.io/page/next-lexicographical-permutation-algorithm},
	urldate = {2023-06-28},
	author = {{Nayuki}},
	month = jun,
	year = {2018},
}

@article{christofides_worst-case_1976,
	title = {Worst-{Case} {Analysis} of a {New} {Heuristic} for the {Travelling} {Salesman} {Problem}},
	volume = {3},
	issn = {2662-2556},
	url = {https://link.springer.com/10.1007/s43069-021-00101-z},
	doi = {10.1007/s43069-021-00101-z},
	abstract = {Abstract An O( n 3 ) heuristic algorithm is described for solving d -city travelling salesman problems (TSP) whose cost matrix satisfies the triangularity condition. The algorithm involves as substeps the computation of a shortest spanning tree of the graph G defining the TSP and the finding of a minimum cost perfect matching of a certain induced subgraph of G . A worst-case analysis of this heuristic shows that the ratio of the answer obtained to the optimum TSP solution is strictly less than 3/2. This represents a 50\% reduction over the value 2 which was the previously best known such ratio for the performance of other polynomial growth algorithms for the TSP.},
	language = {en},
	number = {1},
	urldate = {2023-06-26},
	journal = {Operations Research Forum},
	author = {Christofides, Nicos},
	month = feb,
	year = {1976},
	pages = {20},
	file = {Christofides - 2022 - Worst-Case Analysis of a New Heuristic for the Tra.pdf:/home/johann/Zotero/storage/A95W64QZ/Christofides - 2022 - Worst-Case Analysis of a New Heuristic for the Tra.pdf:application/pdf},
}

@article{held_traveling-salesman_1970,
	title = {The {Traveling}-{Salesman} {Problem} and {Minimum} {Spanning} {Trees}},
	volume = {18},
	issn = {0030-364X, 1526-5463},
	url = {https://pubsonline.informs.org/doi/10.1287/opre.18.6.1138},
	doi = {10.1287/opre.18.6.1138},
	abstract = {This paper explores new approaches to the symmetric traveling-salesman problem in which 1-trees, which are a slight variant of spanning trees, play an essential role. A 1-tree is a tree together with an additional vertex connected to the tree by two edges. We observe that (i) a tour is precisely a 1-tree in which each vertex has degree 2, (ii) a minimum 1-tree is easy to compute, and (iii) the transformation on “intercity distances” c ij → C ij + π i + π j leaves the traveling-salesman problem invariant but changes the minimum 1-tree. Using these observations, we define an infinite family of lower bounds w(π) on C*, the cost of an optimum tour. We show that max π w(π) = C* precisely when a certain well-known linear program has an optimal solution in integers. We give a column-generation method and an ascent method for computing max π w(π), and construct a branch-and-bound method in which the lower bounds w(π) control the search for an optimum tour.},
	language = {en},
	number = {6},
	urldate = {2023-05-09},
	journal = {Operations Research},
	author = {Held, Michael and Karp, Richard M.},
	month = dec,
	year = {1970},
	pages = {1138--1162},
}

@misc{noauthor_digizeitschriften_nodate,
	title = {Digizeitschriften},
	url = {https://www.digizeitschriften.de/id/235181684_0006|log12?tify=%7B%22pages%22%3A%5B36%5D%2C%22pan%22%3A%7B%22x%22%3A0.53%2C%22y%22%3A0.802%7D%2C%22view%22%3A%22export%22%2C%22zoom%22%3A0.347%7D},
	urldate = {2023-10-02},
	file = {Digizeitschriften:/home/johann/Zotero/storage/S7L25TWT/235181684_0006log12.html:text/html},
}

@article{hierholzer_ueber_1873,
	title = {Ueber die {Möglichkeit}, einen {Linienzug} ohne {Wiederholung} und ohne {Unterbrechung} zu umfahren.},
	volume = {Mathematische Analen},
	url = {https://www.digizeitschriften.de/id/235181684_0006|log12?tify=%7B%22pages%22%3A%5B36%5D%2C%22pan%22%3A%7B%22x%22%3A0.53%2C%22y%22%3A0.786%7D%2C%22view%22%3A%22export%22%2C%22zoom%22%3A0.37%7D},
	language = {de},
	number = {VI. Band. 1. Heft},
	urldate = {2023-10-02},
	author = {Hierholzer, Carl},
	year = {1873},
	pages = {30--32},
	file = {Digizeitschriften:/home/johann/Zotero/storage/KW9B877G/235181684_0006log12.html:text/html},
}

@article{krumke_graphentheoretische_nodate,
	series = {{ZIB}-{Report} / {Konrad}-{Zuse}-{Zentrum} für {Informationstechnik} {Berlin} 2000,19},
	title = {Graphentheoretische {Konzepte} und {Algorithmen}},
	url = {https://edocs.tib.eu/files/e001/322814448.pdf},
	language = {de},
	author = {Krumke, Sven Oliver and Noltemeier, Hartmut and Wirth, Hans-Christoph and Schwarz, Stefan and Wolf, Thomas and Sachse, Christoph and Mayer, Florian and Weidmann, Simon},
	file = {Krumke et al. - am Lehrstuhl für Informatik I der Bayerischen Juli.pdf:/home/johann/Zotero/storage/9SHZWCU2/Krumke et al. - am Lehrstuhl für Informatik I der Bayerischen Juli.pdf:application/pdf},
}

@book{noauthor_graphentheoretische_2000,
	address = {Berlin},
	edition = {[Elektronische Ressource]},
	series = {{ZIB}-{Report} / {Konrad}-{Zuse}-{Zentrum} für {Informationstechnik} {Berlin} 2000,19},
	title = {Graphentheoretische {Konzepte} und {Algorithmen}},
	url = {https://edocs.tib.eu/files/e001/322814448.pdf},
	language = {ger},
	publisher = {ZIB},
	year = {2000},
	note = {Type: Online-Ressource},
	keywords = {Graphentheorie / Netzwerkfluss / Optimierungsproblem / Approximationsalgorithmus / Komplexitätstheorie},
	annote = {164 p. = 1,5 MB, text and images, graphics},
	annote = {Also available as printed version},
	annote = {Differences between the printed and electronic version of the document are possible},
}

@article{fleischner_algorithms_1991,
	series = {Annals of {Discrete} {Mathematics}},
	title = {Algorithms for {Eulerian} {Trails} and {Cycle} {Decompositions}, {Maze} {Search} {Algorithms}},
	volume = {50},
	issn = {0167-5060},
	url = {https://www.sciencedirect.com/science/article/pii/S0167506008701584},
	doi = {10.1016/S0167-5060(08)70158-4},
	journal = {Eulerian Graphs and Related Topics},
	editor = {Fleischner, Herbert},
	year = {1991},
	doi = {https://doi.org/10.1016/S0167-5060(08)70158-4},
	note = {ISSN: 0167-5060},
	pages = {X.1--X.34},
}

@misc{reducible_traveling_2022,
	title = {The {Traveling} {Salesman} {Problem}: {When} {Good} {Enough} {Beats} {Perfect}},
	shorttitle = {The {Traveling} {Salesman} {Problem}},
	url = {https://www.youtube.com/watch?v=GiDsjIBOVoA},
	abstract = {Use the code "reducible" to get CuriosityStream for less than \$15 a year! https://curiositystream.com/reducible 

The Traveling Salesman Problem (TSP) is one of the most notorious problems in all of computer science. In this video, we dive into why the problem presents such a challenge for computer scientists and some of the clever methods used to solve the problem.

We start with showing why all brute force solutions and even optimizations to get exact solutions can't reliably be used for large instances of the problem. We then proceed to discuss some heuristic based approaches such as nearest neighbors, greedy, and Christofides to get solutions that are reasonably close to the optimal solution.

But after finding a candidate solution, we also show how one might improve this solution via local search. We discuss some interesting algorithms for tour improvements including 2-opt, random swapping, and 3-opt improvements. Finally, we show some clever ways to analyze the search space, including simulated annealing and ant colony optimization. 

Chapters:
0:00 Intro
1:27 Problem Definition
2:27 Why Finding Optimal Solution Is Practically Impossible
5:35 Nearest Neighbor Heuristic
6:59 Lower Bounding TSP
11:03 Greedy Heuristic
12:06 Christofides Algorithm
16:11 Sponsor (CuriosityStream)
17:15 Tour Improvements
21:13 Simulated Annealing
24:14 Ant Colony Optimization
28:25 Conclusion

Animations created jointly by Nipun Ramakrishnan and Jesús Rascón.

References:

Nice interactive on various TSP algorithms: https://cse442-17f.github.io/Travelin...

Many of the results for the algorithms are based on findings in this paper: https://www.cs.ubc.ca/{\textasciitilde}hutter/previou...

This video wouldn't be possible without the open source library manim created by 3blue1brown and maintained by Manim Community.
The Manim Community Developers. (2022). Manim – Mathematical Animation Framework (Version v0.11.0) [Computer software]. https://www.manim.community/

Here is link to the repository that contains the code used to generate the animations in this video: https://github.com/nipunramk/Reducible

Music in this video comes from Jesús Rascón and Aaskash Gandhi

Socials:
Patreon: https://www.patreon.com/reducible
Twitter: https://twitter.com/Reducible20

Big thanks to the community of Patreons that support this channel. Special thanks to the following Patreons:
Andjela Arsic
Andreas
Adam Dřínek
Burt Humburg
Brian Cloutier
Eugene Tulushev
kerrytazi
Matt Q
Mutual Information
Ram K
Richard Wells
Sebastian Gamboa
Winston Durand
Zac Landis},
	language = {en},
	urldate = {2023-10-02},
	author = {{Reducible}},
	month = jul,
	year = {2022},
}

@incollection{cormen_introduction_2022,
	address = {Cambridge, Massachusetts},
	edition = {Fourth edition},
	title = {Introduction to algorithms},
	isbn = {9780262046305 {\textbar} 978-0-262-04630-5 {\textbar} 026204630X {\textbar} 0-262-04630-X},
	url = {http://www.gbv.de/dms/weimar/toc/1767218192_toc.pdf},
	abstract = {"The leading introductory textbook and reference on algorithms"–},
	language = {eng},
	publisher = {The MIT Press},
	author = {Cormen, Thomas H. and Leiserson, Charles Eric and Rivest, Ronald Linn and Stein, Clifford},
	year = {2022},
	note = {Type: Band},
	keywords = {Algorithmische Programmierung / Datenstruktur / Algorithmus / Informatik / Algorithmus / Algorithmentheorie},
	annote = {Hier auch später erschienene, unveränderte Nachdrucke},
	annote = {Literaturverzeichnis: Seite 1227-1250},
	annote = {xx, 1291 Seiten, Illustrationen, Diagramme, 24 cm},
	file = {Cormen et al. - 2022 - Introduction to algorithms.pdf:/home/johann/Zotero/storage/NDKSCU4T/Cormen et al. - 2022 - Introduction to algorithms.pdf:application/pdf;introduction-to-algorithms-4th-edition.pdf:/home/johann/Zotero/storage/BP6HFHB6/introduction-to-algorithms-4th-edition.pdf:application/pdf},
}

@misc{noauthor_tsp_2007,
	title = {{TSP} {Applications}},
	url = {https://www.math.uwaterloo.ca/tsp/apps/index.html},
	language = {en},
	urldate = {2023-10-05},
	year = {2007},
	file = {TSP Applications:/home/johann/Zotero/storage/MZPBXCK4/index.html:text/html},
}

@misc{noauthor_rust_nodate,
	title = {Rust {Programming} {Language}},
	url = {https://www.rust-lang.org/},
	abstract = {A language empowering everyone to build reliable and efficient software.},
	urldate = {2023-08-15},
}

@misc{developers_servo_nodate,
	title = {Servo, the parallel browser engine},
	url = {https://servo.org/},
	abstract = {Servo is an independent, modular, embeddable web rendering engine written in Rust},
	urldate = {2023-08-15},
	author = {Developers, The Servo Project},
}

@misc{gaynor_what_nodate,
	title = {What science can tell us about {C} and {C}++'s security · {Alex} {Gaynor}},
	url = {https://alexgaynor.net/2020/may/27/science-on-memory-unsafety-and-security/},
	urldate = {2023-08-15},
	author = {Gaynor, Alex},
}

@misc{stepanov_detecting_2020,
	title = {Detecting {Memory} {Corruption} {Bugs} {With} {HWASan}},
	url = {https://android-developers.googleblog.com/2020/02/detecting-memory-corruption-bugs-with-hwasan.html},
	abstract = {News and insights on the Android platform, developer tools, and events.},
	urldate = {2023-08-15},
	author = {Stepanov, Evgenii},
	month = feb,
	year = {2020},
}

@misc{stoep_queue_2019,
	title = {Queue the {Hardening} {Enhancements}},
	url = {https://security.googleblog.com/2019/05/queue-hardening-enhancements.html},
	abstract = {Posted by Jeff Vander Stoep, Android Security \& Privacy Team and Chong Zhang, Android Media Team [Cross-posted from the Android Develo...},
	urldate = {2023-08-15},
	author = {Stoep},
	month = may,
	year = {2019},
}

@misc{kehrer_memory_2019,
	title = {Memory {Unsafety} in {Apple}'s {Operating} {Systems}},
	url = {https://langui.sh/2019/07/23/apple-memory-safety/},
	urldate = {2023-08-15},
	author = {Kehrer, Paul},
	month = jul,
	year = {2019},
}

@misc{noauthor_memory_nodate,
	title = {Memory safety},
	url = {https://www.chromium.org/Home/chromium-security/memory-safety/},
	urldate = {2023-08-15},
}

@misc{thomas_proactive_2019,
	title = {A proactive approach to more secure code {\textbackslash}textbar {MSRC} {Blog} {\textbackslash}textbar {Microsoft} {Security} {Response} {Center}},
	url = {https://msrc.microsoft.com/blog/2019/07/a-proactive-approach-to-more-secure-code/},
	urldate = {2023-08-15},
	author = {Thomas, Gavin},
	month = jul,
	year = {2019},
}

@misc{hosfelt_implications_2019,
	title = {Implications of {Rewriting} a {Browser} {Component} in {Rust} – {Mozilla} {Hacks} - the {Web} developer blog},
	url = {https://hacks.mozilla.org/2019/02/rewriting-a-browser-component-in-rust},
	abstract = {Since our first release in 2002, there have been 69 security bugs in Firefox’s style component. If we'd had a time machine and could have written this component in Rust from the start, 51\% wouldn't have happened. That said, Rust is not foolproof. Developers still need to be aware of correctness bugs and data leakage attacks.},
	urldate = {2023-08-15},
	author = {Hosfelt, Diane},
	month = feb,
	year = {2019},
}

@misc{geoffrey_thomas_geofft_unofficial_2019,
	title = {Some unofficial @{LazyFishBarrel} stats from @alex\_gaynor and myself: 65\% of {CVEs} behind the last six months of {Ubuntu} security updates to the {Linux} kernel have been memory unsafety.},
	url = {https://twitter.com/geofft/status/1132739184060489729},
	urldate = {2023-08-15},
	author = {{Geoffrey Thomas [@geofft]}},
	month = may,
	year = {2019},
}

@misc{asay_why_2020,
	title = {Why {AWS} loves {Rust}, and how we’d like to help {\textbackslash}textbar {AWS} {Open} {Source} {Blog}},
	url = {https://aws.amazon.com/blogs/opensource/why-aws-loves-rust-and-how-wed-like-to-help/},
	urldate = {2023-08-15},
	author = {Asay, Matt},
	month = nov,
	year = {2020},
	annote = {Section: Announcements},
}

@misc{noauthor_welcome_nodate,
	title = {Welcome to {Comprehensive} {Rust} - {Comprehensive} {Rust}},
	url = {https://google.github.io/comprehensive-rust/},
	urldate = {2023-08-15},
}

@misc{garcia_programming_2022,
	title = {Programming languages endorsed for server-side use at {Meta}},
	url = {https://engineering.fb.com/2022/07/27/developer-tools/programming-languages-endorsed-for-server-side-use-at-meta/},
	abstract = {Supporting a programming language at Meta is a very careful and deliberate decision. We’re sharing our internal programming language guidance that helps our engineers and developers choose the best…},
	urldate = {2023-08-15},
	author = {Garcia, Garcia},
	month = jul,
	year = {2022},
}

@misc{jirehl_microsoft_2022,
	title = {Microsoft {Azure} {CTO} {Wants} to {Replace} {C} and {C}++ {With} {Rust} {\textbackslash}textbar {The} {Software} {Report}},
	url = {https://www.thesoftwarereport.com/microsoft-azure-cto-wants-to-replace-c-and-c-with-rust/},
	urldate = {2023-08-15},
	author = {{jirehl}},
	month = oct,
	year = {2022},
}

@misc{claburn_linus_2022,
	title = {Linus {Torvalds} says {Rust} is coming to the {Linux} kernel},
	url = {https://www.theregister.com/2022/06/23/linus_torvalds_rust_linux_kernel/},
	abstract = {Maintainer lack of familiarity won't be an issue, chief insists, citing his own bafflement when faced with Perl},
	urldate = {2023-08-15},
	author = {Claburn, Thomas},
	month = jun,
	year = {2022},
}

@misc{you_bindgen_2023,
	title = {bindgen},
	url = {https://github.com/rust-lang/rust-bindgen},
	abstract = {Automatically generates Rust FFI bindings to C (and some C++) libraries.},
	urldate = {2023-08-15},
	publisher = {The Rust Programming Language},
	author = {You, Jyun-Yan},
	month = aug,
	year = {2023},
	keywords = {bindings, codegen, ffi},
	annote = {original-date: 2016-06-22T15:05:51Z},
}

@misc{pyo3_project_and_contributors_pyo3_2023,
	title = {{PyO3}},
	url = {https://github.com/PyO3/pyo3},
	abstract = {Rust bindings for the Python interpreter},
	urldate = {2023-08-15},
	author = {{PyO3 Project and Contributors}},
	month = aug,
	year = {2023},
	annote = {original-date: 2017-05-13T05:22:06Z},
}

@misc{noauthor_stack_2023,
	title = {Stack {Overflow} {Developer} {Survey} 2023},
	url = {https://survey.stackoverflow.co/2023},
	abstract = {In May 2023 over 90,000 developers responded to our annual survey about how they learn and level up, which tools they're using, and which ones they want.},
	urldate = {2023-08-28},
	year = {2023},
}

@misc{noauthor_rustuprs_nodate,
	title = {rustup.rs - {The} {Rust} toolchain installer},
	url = {https://rustup.rs/},
	urldate = {2023-10-06},
}

@misc{noauthor_rayon_2023,
	title = {Rayon},
	url = {https://github.com/rayon-rs/rayon},
	abstract = {Rayon: A data parallelism library for Rust},
	urldate = {2023-10-06},
	publisher = {rayon-rs},
	month = oct,
	year = {2023},
	annote = {original-date: 2014-10-02T15:38:05Z},
}

@misc{noauthor_mpi_2023,
	title = {{MPI} bindings for {Rust}},
	url = {https://github.com/rsmpi/rsmpi},
	abstract = {MPI bindings for Rust},
	urldate = {2023-10-06},
	publisher = {rsmpi},
	month = oct,
	year = {2023},
	keywords = {mpi, rust},
	annote = {original-date: 2015-07-21T20:51:28Z},
}

@misc{noauthor_nextest_2023,
	title = {Nextest},
	url = {https://github.com/nextest-rs/nextest},
	abstract = {A next-generation test runner for Rust.},
	urldate = {2023-10-06},
	publisher = {nextest-rs},
	month = oct,
	year = {2023},
	keywords = {rust, cargo-plugin, cargo-subcommand, flaky-tests, junit, junit-report, testing},
	annote = {original-date: 2022-02-08T00:34:33Z},
}

@misc{goulart_python_2023,
	title = {Python {TSP} {Solver}},
	url = {https://github.com/fillipe-gsm/python-tsp},
	abstract = {Library to solve Traveling Salesperson Problems with pure Python code},
	urldate = {2023-10-06},
	author = {Goulart, Fillipe},
	month = oct,
	year = {2023},
	annote = {original-date: 2020-06-20T16:42:46Z},
}

@misc{song_solving_2021-1,
	title = {Solving the {Traveling} {Salesperson} {Problem} with deep reinforcement learning on {Amazon} {SageMaker} {\textbackslash}textbar {AWS} {Open} {Source} {Blog}},
	url = {https://aws.amazon.com/de/blogs/opensource/solving-the-traveling-salesperson-problem-with-deep-reinforcement-learning-on-amazon-sagemaker/},
	language = {en},
	urldate = {2023-05-15},
	author = {Song, Yin and Davis, Josiah and Duthie, Eden and Wu, Chen},
	month = sep,
	year = {2021},
	file = {Solving the Traveling Salesperson Problem with deep reinforcement learning on Amazon SageMaker | AWS Open Source Blog:/home/johann/Zotero/storage/DWX89VP5/solving-the-traveling-salesperson-problem-with-deep-reinforcement-learning-on-amazon-sagemaker.html:text/html},
}

@misc{noauthor_tsp_deutschland_3png_nodate,
	title = {{TSP}\_Deutschland\_3.png ({PNG}-{Grafik}, 326 × 350 {Pixel})},
	url = {https://upload.wikimedia.org/wikipedia/commons/c/c4/TSP_Deutschland_3.png},
	urldate = {2023-05-15},
	file = {TSP_Deutschland_3.png (PNG-Grafik, 326 × 350 Pixel):/home/johann/Zotero/storage/3BQZ3K2L/TSP_Deutschland_3.html:text/html},
}

@article{held_dynamic_1962,
	title = {A {Dynamic} {Programming} {Approach} to {Sequencing} {Problems}},
	volume = {10},
	issn = {0368-4245},
	url = {https://www.jstor.org/stable/2098806},
	number = {1},
	urldate = {2023-10-06},
	journal = {Journal of the Society for Industrial and Applied Mathematics},
	author = {Held, Michael and Karp, Richard M.},
	year = {1962},
	pages = {196--210},
	annote = {Publisher: Society for Industrial and Applied Mathematics},
}

@misc{bentley_lecture_2018,
	title = {Lecture 21: {Tuning} a {TSP} {Algorithm} {\textbackslash}textbar {Performance} {Engineering} of {Software} {Systems}},
	shorttitle = {Lecture 21},
	url = {https://ocw.mit.edu/courses/6-172-performance-engineering-of-software-systems-fall-2018/resources/lecture-21-tuning-a-tsp-algorithm/},
	abstract = {MIT OpenCourseWare is a web based publication of virtually all MIT course content. OCW is open and available to the world and is a permanent MIT activity},
	urldate = {2023-10-06},
	author = {Bentley, Jon},
	year = {2018},
}

@misc{noauthor_rustc-hash_2023,
	title = {rustc-hash},
	url = {https://github.com/rust-lang/rustc-hash},
	abstract = {Custom hash algorithm used by rustc (plus hashmap/set aliases): fast, deterministic, not secure},
	urldate = {2023-10-06},
	publisher = {The Rust Programming Language},
	month = oct,
	year = {2023},
	annote = {original-date: 2018-05-24T12:26:21Z},
}

@misc{message_passing_interface_forum_mpi_2015,
	title = {{MPI}: {A} {Message}-{Passing} {Interface} {Standard}},
	url = {https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report.pdf},
	language = {en},
	author = {{Message Passing Interface Forum}},
	month = jun,
	year = {2015},
	file = {MPI A Message-Passing Interface Standard.pdf:/home/johann/Zotero/storage/CLSLDDR2/MPI A Message-Passing Interface Standard.pdf:application/pdf},
}

@incollection{malyshkin_hierarchical_2015,
	address = {Cham},
	title = {Hierarchical {Optimization} of {MPI} {Reduce} {Algorithms}},
	volume = {9251},
	isbn = {978-3-319-21908-0 978-3-319-21909-7},
	url = {https://hcl.ucd.ie/system/files/pact2015reduce.pdf},
	abstract = {Optimization of MPI collective communication operations has been an active research topic since the advent of MPI in 1990s. Many general and architecture-speciﬁc collective algorithms have been proposed and implemented in the state-of-the-art MPI implementations. Hierarchical topology-oblivious transformation of existing communication algorithms has been recently proposed as a new promising approach to optimization of MPI collective communication algorithms and MPIbased applications. This approach has been successfully applied to the most popular parallel matrix multiplication algorithm, SUMMA, and the state-of-the-art MPI broadcast algorithms, demonstrating signiﬁcant multi-fold performance gains, especially for large-scale HPC systems. In this paper, we apply this approach to optimization of the MPI reduce operation. Theoretical analysis and experimental results on a cluster of Grid’5000 platform are presented.},
	language = {en},
	urldate = {2023-10-10},
	booktitle = {Parallel {Computing} {Technologies}},
	publisher = {Springer International Publishing},
	author = {Hasanov, Khalid and Lastovetsky, Alexey},
	editor = {Malyshkin, Victor},
	year = {2015},
	doi = {10.1007/978-3-319-21909-7_3},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {21--34},
	file = {Hasanov und Lastovetsky - 2015 - Hierarchical Optimization of MPI Reduce Algorithms.pdf:/home/johann/Zotero/storage/7QQUH8UL/Hasanov und Lastovetsky - 2015 - Hierarchical Optimization of MPI Reduce Algorithms.pdf:application/pdf},
}

@misc{lovasz_complexity_2013,
	title = {Complexity of {Algorithms}},
	url = {https://www.uni-miskolc.hu/~matha/complexity_Gacs_Lovasz.pdf},
	language = {en},
	author = {Lovász, László and Király, Zoltán and Pálvölgyi, Dömötör and Friedl, Katalin},
	translator = {Gács, Péter},
	month = dec,
	year = {2013},
	file = {Király et al. - The ﬁrst version of this lecture notes was transla.pdf:/home/johann/Zotero/storage/9QCPRWIG/Király et al. - The ﬁrst version of this lecture notes was transla.pdf:application/pdf},
}

@misc{noauthor_zaligvinderzaligvinder_nodate,
	title = {zaligvinder/zaligvinder},
	url = {https://github.com/zaligvinder/zaligvinder},
	urldate = {2023-10-10},
	file = {zaligvinder/zaligvinder:/home/johann/Zotero/storage/MA7B59UX/zaligvinder.html:text/html},
}

@article{chu_ant_2004,
	title = {Ant colony system with communication strategies},
	volume = {167},
	issn = {0020-0255},
	url = {https://www.sciencedirect.com/science/article/pii/S0020025503004110},
	doi = {10.1016/j.ins.2003.10.013},
	abstract = {In this paper an ant colony system (ACS) with communication strategies is developed. The artificial ants are partitioned into several groups. Seven communication methods for updating the pheromone level between groups in ACS are proposed and work on the traveling salesman problem using our system is presented. Experimental results based on three well-known traveling salesman data sets demonstrate the proposed ACS with communication strategies are superior to the existing ant colony system (ACS) and ant system (AS) with similar or better running times.},
	number = {1},
	urldate = {2023-10-10},
	journal = {Information Sciences},
	author = {Chu, Shu-Chuan and Roddick, John F. and Pan, Jeng-Shyang},
	month = dec,
	year = {2004},
	keywords = {Ant colony system (ACS), Ant system (AS), Communication strategies},
	pages = {63--76},
	file = {ScienceDirect Snapshot:/home/johann/Zotero/storage/HW79FRPR/S0020025503004110.html:text/html},
}

@article{lin_effective_1973,
	title = {An {Effective} {Heuristic} {Algorithm} for the {Traveling}-{Salesman} {Problem}},
	volume = {21},
	issn = {0030-364X},
	url = {https://pubsonline.informs.org/doi/10.1287/opre.21.2.498},
	doi = {10.1287/opre.21.2.498},
	abstract = {This paper discusses a highly effective heuristic procedure for generating optimum and near-optimum solutions for the symmetric traveling-salesman problem. The procedure is based on a general approach to heuristics that is believed to have wide applicability in combinatorial optimization problems. The procedure produces optimum solutions for all problems tested, “classical” problems appearing in the literature, as well as randomly generated test problems, up to 110 cities. Run times grow approximately as n2; in absolute terms, a typical 100-city problem requires less than 25 seconds for one case (GE635), and about three minutes to obtain the optimum with above 95 per cent confidence.},
	number = {2},
	urldate = {2023-10-10},
	journal = {Operations Research},
	author = {Lin, S. and Kernighan, B. W.},
	month = apr,
	year = {1973},
	note = {Publisher: INFORMS},
	pages = {498--516},
}

@article{kirkpatrick_optimization_1983,
	title = {Optimization by {Simulated} {Annealing}},
	volume = {220},
	url = {https://www.science.org/doi/10.1126/science.220.4598.671},
	doi = {10.1126/science.220.4598.671},
	abstract = {There is a deep and useful connection between statistical mechanics (the behavior of systems with many degrees of freedom in thermal equilibrium at a finite temperature) and multivariate or combinatorial optimization (finding the minimum of a given function depending on many parameters). A detailed analogy with annealing in solids provides a framework for optimization of the properties of very large and complex systems. This connection to statistical mechanics exposes new information and provides an unfamiliar perspective on traditional optimization problems and methods.},
	number = {4598},
	urldate = {2023-10-10},
	journal = {Science},
	author = {Kirkpatrick, S. and Gelatt, C. D. and Vecchi, M. P.},
	month = may,
	year = {1983},
	note = {Publisher: American Association for the Advancement of Science},
	pages = {671--680},
}

@misc{noauthor_dimforgenalgebra_2023,
	title = {dimforge/nalgebra},
	copyright = {Apache-2.0},
	url = {https://github.com/dimforge/nalgebra},
	abstract = {Linear algebra library for Rust.},
	urldate = {2023-10-10},
	publisher = {dimforge},
	month = oct,
	year = {2023},
	note = {original-date: 2013-05-14T19:10:06Z},
	keywords = {algebra, linear-algebra, matrix, vector},
}

@misc{davidoff_recipes_2023,
	title = {Recipes for avoiding bounds checks in {Rust}},
	copyright = {MIT},
	url = {https://github.com/Shnatsel/bounds-check-cookbook},
	abstract = {Recipes for avoiding bounds checks in Rust, without unsafe!},
	urldate = {2023-10-10},
	author = {Davidoff, Sergey "Shnatsel"},
	month = oct,
	year = {2023},
	note = {original-date: 2022-12-11T19:15:16Z},
}

@article{kolmogorov_blossom_2009,
	title = {Blossom {V}: a new implementation of a minimum cost perfect matching algorithm},
	volume = {1},
	issn = {1867-2949, 1867-2957},
	shorttitle = {Blossom {V}},
	url = {http://link.springer.com/10.1007/s12532-009-0002-8},
	doi = {10.1007/s12532-009-0002-8},
	abstract = {We describe a new implementation of the Edmonds’s algorithm for computing a perfect matching of minimum cost, to which we refer as Blossom V. A key feature of our implementation is a combination of two ideas that were shown to be effective for this problem: the “variable dual updates” approach of Cook and Rohe [8] and the use of priority queues. We achieve this by maintaining an auxiliary graph whose nodes correspond to alternating trees in the Edmonds’s algorithm. While our use of priority queues does not improve the worst-case complexity, it appears to lead to an efﬁcient technique. In the majority of our tests Blossom V outperformed previous implementations of Cook and Rohe [8] and of Mehlhorn and Scha¨fer [24], sometimes by an order of magnitude. We also show that for large VLSI instances it is beneﬁcial to update duals by solving a linear program, contrary to a conjecture by Cook and Rohe.},
	language = {en},
	number = {1},
	urldate = {2023-10-10},
	journal = {Math. Prog. Comp.},
	author = {Kolmogorov, Vladimir},
	month = jul,
	year = {2009},
	pages = {43--67},
	file = {Kolmogorov - 2009 - Blossom V a new implementation of a minimum cost .pdf:/home/johann/Zotero/storage/JHLYV8H4/Kolmogorov - 2009 - Blossom V a new implementation of a minimum cost .pdf:application/pdf},
}

@misc{kolmogorov_blossom_nodate,
	title = {Blossom {V} implementation},
	url = {https://pub.ista.ac.at/~vnk/software.html},
	urldate = {2023-10-10},
	author = {Kolmogorov, Vladimir},
	file = {Software:/home/johann/Zotero/storage/IQ5XTJ64/software.html:text/html},
}

@misc{reinelt_tsplib_nodate,
	title = {{TSPLIB}},
	url = {http://comopt.ifi.uni-heidelberg.de/software/TSPLIB95/},
	urldate = {2023-10-10},
	author = {Reinelt, Gerhard},
	file = {TSPLIB:/home/johann/Zotero/storage/JF53K2FF/TSPLIB95.html:text/html},
}

@misc{tschuter_llvm_2017,
	title = {An {LLVM} {Instrumentation} {Plug}-in for {Score}-{P}},
	url = {https://arxiv.org/abs/1712.01718v1},
	abstract = {Reducing application runtime, scaling parallel applications to higher numbers of processes/threads, and porting applications to new hardware architectures are tasks necessary in the software development process. Therefore, developers have to investigate and understand application runtime behavior. Tools such as monitoring infrastructures that capture performance relevant data during application execution assist in this task. The measured data forms the basis for identifying bottlenecks and optimizing the code. Monitoring infrastructures need mechanisms to record application activities in order to conduct measurements. Automatic instrumentation of the source code is the preferred method in most application scenarios. We introduce a plug-in for the LLVM infrastructure that enables automatic source code instrumentation at compile-time. In contrast to available instrumentation mechanisms in LLVM/Clang, our plug-in can selectively include/exclude individual application functions. This enables developers to fine-tune the measurement to the required level of detail while avoiding large runtime overheads due to excessive instrumentation.},
	language = {en},
	urldate = {2023-10-10},
	journal = {arXiv.org},
	author = {Tschüter, Ronny and Ziegenbalg, Johannes and Wesarg, Bert and Weber, Matthias and Herold, Christian and Döbel, Sebastian and Brendel, Ronny},
	month = dec,
	year = {2017},
	doi = {10.1145/3148173.3148187},
	file = {Full Text PDF:/home/johann/Zotero/storage/FH2QHJ7K/Tschüter et al. - 2017 - An LLVM Instrumentation Plug-in for Score-P.pdf:application/pdf},
}

@misc{noauthor_tau_nodate,
	title = {{TAU} - {Tuning} and {Analysis} {Utilities} -},
	url = {https://www.cs.uoregon.edu/research/tau/home.php},
	urldate = {2023-10-10},
	file = {TAU - Tuning and Analysis Utilities -:/home/johann/Zotero/storage/KUUU6JTW/home.html:text/html},
}

@misc{noauthor_scalasca_nodate,
	title = {Scalasca},
	url = {https://www.scalasca.org/},
	urldate = {2023-10-10},
	file = {Scalasca:/home/johann/Zotero/storage/U2JHUD7U/www.scalasca.org.html:text/html},
}

@incollection{brunst_score-p_2012,
	address = {Berlin, Heidelberg},
	title = {Score-{P}: {A} {Joint} {Performance} {Measurement} {Run}-{Time} {Infrastructure} for {Periscope}, {Scalasca}, {TAU}, and {Vampir}},
	isbn = {978-3-642-31475-9 978-3-642-31476-6},
	shorttitle = {Score-{P}},
	url = {http://link.springer.com/10.1007/978-3-642-31476-6_7},
	language = {en},
	urldate = {2023-10-10},
	booktitle = {Tools for {High} {Performance} {Computing} 2011},
	publisher = {Springer Berlin Heidelberg},
	author = {Knüpfer, Andreas and Rössel, Christian and Mey, Dieter An and Biersdorff, Scott and Diethelm, Kai and Eschweiler, Dominic and Geimer, Markus and Gerndt, Michael and Lorenz, Daniel and Malony, Allen and Nagel, Wolfgang E. and Oleynik, Yury and Philippen, Peter and Saviankou, Pavel and Schmidl, Dirk and Shende, Sameer and Tschüter, Ronny and Wagner, Michael and Wesarg, Bert and Wolf, Felix},
	editor = {Brunst, Holger and Müller, Matthias S. and Nagel, Wolfgang E. and Resch, Michael M.},
	year = {2012},
	doi = {10.1007/978-3-642-31476-6_7},
	pages = {79--91},
	file = {Full Text:/home/johann/Zotero/storage/7LGNM9LC/Knüpfer et al. - 2012 - Score-P A Joint Performance Measurement Run-Time .pdf:application/pdf},
}

@misc{noauthor_vampir_nodate,
	title = {Vampir 10.3},
	url = {https://vampir.eu/},
	urldate = {2023-10-10},
	file = {Vampir 10.3:/home/johann/Zotero/storage/NEDBLXT6/vampir.eu.html:text/html},
}

@misc{weisstein_matching_nodate,
	type = {Text},
	title = {Matching},
	copyright = {Copyright 1999-2023 Wolfram Research, Inc.  See https://mathworld.wolfram.com/about/terms.html for a full terms of use statement.},
	url = {https://mathworld.wolfram.com/Matching.html},
	abstract = {A matching, also called an independent edge set, on a graph G is a set of edges of G such that no two sets share a vertex in common. It is not possible for a matching on a graph with n nodes to exceed n/2 edges. When a matching with n/2 edges exists, it is called a perfect matching. When a matching exists that leaves a single vertex unmatched, it is called a near-perfect matching. While not all graphs have perfect matchings, a largest matching (commonly known as a maximum matching or maximum...},
	language = {en},
	urldate = {2023-10-10},
	author = {Weisstein, Eric W.},
	note = {Publisher: Wolfram Research, Inc.},
	file = {Snapshot:/home/johann/Zotero/storage/FK3M8VLT/Matching.html:text/html},
}

@misc{garro95_priorityqueue_2023,
	title = {{PriorityQueue}},
	url = {https://github.com/garro95/priority-queue},
	author = {{garro95}},
	month = feb,
	year = {2023},
}
